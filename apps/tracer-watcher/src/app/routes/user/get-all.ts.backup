import { FastifyPlugin } from "fastify"
import { getConnection } from 'typeorm';
import { User } from '@anomix/dao';
import { PaginationParams, UserDTO, RequestHandler } from '@/lib/types';

export const getAll: FastifyPlugin = async function (
    instance,
    options,
    done
): Promise<void> {
    instance.route({
        method: "GET",
        url: "/",
        schema,
        handler
    })
}

export const handler: RequestHandler<null, PaginationParams> = async function (
    req,
    res
): Promise<UserDTO[]> {

    const userRepository = getConnection().getRepository(User)
    const { page = 1, limit = 25 } = req.params

    const users = await userRepository.find({
        skip: limit * (page - 1),
        take: limit
    })

    return users.map(user => {
        return user.toResultObject()
    })

}

const schema = {
    tags: ["User"],
    params: {
        type: "object",
        properties: {
            take: { type: "number", },
            limit: { type: "number" },
        },
        required: []
    },
    response: {
        200: {
            type: "array",
            items: {
                type: "object",
                properties: {
                    id: { type: "string" },
                    email: { type: "string" },
                    username: { type: "string" }
                }
            }
        },
    }
}
